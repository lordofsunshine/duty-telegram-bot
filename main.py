import telebot
import time
from datetime import datetime, timedelta
import pytz
import threading
import logging
import os
from pymongo import MongoClient
from pymongo.errors import ConnectionFailure
from logging.handlers import RotatingFileHandler
import emoji
from telebot.apihelper import ApiTelegramException

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = 'YOUR_TELEGRAM_TOKEN'
MONGODB_URI = 'YOUR_MONGODB_URI'
DB_NAME = 'duty_bot_db'
TIMEZONE = 'Europe/Moscow'
DUTY_MESSAGE_TIME = '07:30'
CREATOR_ID = 5427664683

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
CONFIG = {
    # –í–∫–ª—é—á–∏—Ç—å –∏–ª–∏ –≤—ã–∫–ª—é—á–∏—Ç—å —Ä–∞–±–æ—Ç—É –≤ –ø—Ä–∞–∑–¥–Ω–∏—á–Ω—ã–µ –¥–Ω–∏ (True/False)
    "WORK_ON_HOLIDAYS": False,
    # –í–∫–ª—é—á–∏—Ç—å –∏–ª–∏ –≤—ã–∫–ª—é—á–∏—Ç—å —Ä–∞–±–æ—Ç—É –≤ –≤—ã—Ö–æ–¥–Ω—ã–µ –¥–Ω–∏ (True/False)
    "WORK_ON_WEEKENDS": False
}

log_formatter = logging.Formatter('%(asctime)s [%(levelname)s] %(message)s', 
                                datefmt='%Y-%m-%d %H:%M:%S')
log_file = 'bot_log.txt'
file_handler = RotatingFileHandler(log_file, maxBytes=5*1024*1024, backupCount=3)
file_handler.setFormatter(log_formatter)
console_handler = logging.StreamHandler()
console_handler.setFormatter(log_formatter)

logger = logging.getLogger('DutyBot')
logger.setLevel(logging.INFO)
logger.addHandler(file_handler)
logger.addHandler(console_handler)

bot = telebot.TeleBot(BOT_TOKEN, threaded=False)
telebot.apihelper.RETRY_ON_ERROR = True
telebot.apihelper.READ_TIMEOUT = 90

try:
    client = MongoClient(MONGODB_URI)
    client.admin.command('ping')
    logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
    db = client[DB_NAME]
except ConnectionFailure:
    logger.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB")
    exit(1)

duty_schedule = [
    ("–ê–ª–µ–∫—Å–µ–π –ü.", "–ï–∫–∞—Ç–µ—Ä–∏–Ω–∞ –°."),
    ("–î–º–∏—Ç—Ä–∏–π –ö.", "–û–ª—å–≥–∞ –í."),
    ("–°–µ—Ä–≥–µ–π –ú.", "–ê–Ω–Ω–∞ –†."),
    ("–ò–≥–æ—Ä—å –õ.", "–ù–∞—Ç–∞–ª—å—è –ñ."),
    ("–í–ª–∞–¥–∏–º–∏—Ä –ù.", "–¢–∞—Ç—å—è–Ω–∞ –§."),
    ("–ê–Ω–¥—Ä–µ–π –ì.", "–ú–∞—Ä–∏—è –î."),
    ("–ü–∞–≤–µ–ª –®.", "–ï–ª–µ–Ω–∞ –ë."),
    ("–ù–∏–∫–æ–ª–∞–π –¢.", "–ò—Ä–∏–Ω–∞ –ö."),
    ("–ú–∞–∫—Å–∏–º –ó.", "–°–≤–µ—Ç–ª–∞–Ω–∞ –•."),
    ("–ê—Ä—Ç–µ–º –Æ.", "–Æ–ª–∏—è –©."),
    ("–í–∏–∫—Ç–æ—Ä –ï.", "–õ—é–¥–º–∏–ª–∞ –¶."),
    ("–ì—Ä–∏–≥–æ—Ä–∏–π –ß.", "–í–∞–ª–µ–Ω—Ç–∏–Ω–∞ –≠."),
    ("–ï–≤–≥–µ–Ω–∏–π –Ø.", "–ö—Å–µ–Ω–∏—è –£.")
]

holidays = [
    "01-01", "01-02", "01-03", "01-04", "01-05", "01-06", "01-07", "01-08",
    "02-23", "02-24", "03-08", "05-01", "05-09", "06-12", "11-04"
]

bot_active = True
bot_instance = None

def initialize_db():
    settings = db.settings.find_one({"_id": "bot_settings"})
    if not settings:
        db.settings.insert_one({
            "_id": "bot_settings",
            "current_duty_index": 0,
            "last_reset_date": datetime.now(pytz.timezone(TIMEZONE)),
            "group_id": None,
            "thread_id": None,
            "last_message_date": None,
            "is_active": True
        })
        logger.info("üìö –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

def is_working_day(date):
    if not CONFIG["WORK_ON_WEEKENDS"] and date.weekday() >= 5:
        return False
    if not CONFIG["WORK_ON_HOLIDAYS"] and date.strftime("%m-%d") in holidays:
        return False
    return True

def get_duty_pair():
    try:
        settings = db.settings.find_one({"_id": "bot_settings"})
        if not settings:
            initialize_db()
            settings = db.settings.find_one({"_id": "bot_settings"})

        current_index = settings.get("current_duty_index", 0)
        duty_pair = duty_schedule[current_index]

        next_index = (current_index + 1) % len(duty_schedule)
        db.settings.update_one(
            {"_id": "bot_settings"},
            {"$set": {"current_duty_index": next_index}}
        )

        if next_index == 0:
            reset_duty_cycle()

        return duty_pair
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ get_duty_pair: {e}")
        return duty_schedule[0]

def reset_duty_cycle():
    try:
        db.settings.update_one(
            {"_id": "bot_settings"},
            {
                "$set": {
                    "current_duty_index": 0,
                    "last_reset_date": datetime.now(pytz.timezone(TIMEZONE))
                }
            }
        )
        db.duty_history.delete_many({})
        logger.info("üîÑ –¶–∏–∫–ª –¥–µ–∂—É—Ä—Å—Ç–≤ —Å–±—Ä–æ—à–µ–Ω")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ reset_duty_cycle: {e}")

def should_send_message():
    try:
        if not bot_active:
            logger.info("üõë –ë–æ—Ç –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω, —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
            return False
            
        settings = db.settings.find_one({"_id": "bot_settings"})
        if not settings:
            logger.info("‚ö†Ô∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
            initialize_db()
            return True

        moscow_tz = pytz.timezone(TIMEZONE)
        current_date = datetime.now(moscow_tz).date()
        last_message_date = settings.get("last_message_date")
        
        if last_message_date:
            last_message_date = last_message_date.date() if isinstance(last_message_date, datetime) else last_message_date
            if current_date > last_message_date and is_working_day(current_date):
                logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ. –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞: {current_date}, –ü–æ—Å–ª–µ–¥–Ω—è—è –¥–∞—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {last_message_date}")
                return True
            else:
                logger.info(f"‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ. –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞: {current_date}, –ü–æ—Å–ª–µ–¥–Ω—è—è –¥–∞—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {last_message_date}")
                return False
        else:
            logger.info("‚úÖ –ü–µ—Ä–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è")
            return True
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ should_send_message: {e}")
        return False

def send_message_with_retry(chat_id, message, parse_mode='HTML', message_thread_id=None, max_retries=3):
    for attempt in range(max_retries):
        try:
            if message_thread_id:
                bot.send_message(chat_id, message, parse_mode=parse_mode, message_thread_id=message_thread_id)
            else:
                bot.send_message(chat_id, message, parse_mode=parse_mode)
            return True
        except ApiTelegramException as e:
            if e.error_code == 429:
                retry_after = e.result_json.get('parameters', {}).get('retry_after', 5)
                logger.warning(f"Rate limit exceeded. Retrying after {retry_after} seconds.")
                time.sleep(retry_after)
            else:
                logger.error(f"Telegram API error: {e}")
                time.sleep(5)
        except Exception as e:
            logger.error(f"Error sending message: {e}")
            time.sleep(5)
    logger.error("Failed to send message after maximum retries")
    return False

def send_duty_message():
    try:
        if not bot_active:
            logger.info("üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
            return
            
        if not should_send_message():
            logger.info("‚ÑπÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–µ–≥–æ–¥–Ω—è")
            return

        settings = db.settings.find_one({"_id": "bot_settings"})
        if not settings:
            logger.error("‚ùå –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return

        group_id = settings.get("group_id")
        thread_id = settings.get("thread_id")
        
        if not group_id:
            logger.error("‚ùå ID –≥—Ä—É–ø–ø—ã –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            return

        moscow_tz = pytz.timezone(TIMEZONE)
        current_date = datetime.now(moscow_tz)
        
        if not is_working_day(current_date):
            logger.info(f"üìÖ –ü—Ä–æ–ø—É—Å–∫ —Å–æ–æ–±—â–µ–Ω–∏—è - –Ω–µ—Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å: {current_date}")
            return

        duty_pair = get_duty_pair()
        
        message = (
            f"üîî <b>–°–µ–≥–æ–¥–Ω—è –¥–µ–∂—É—Ä—è—Ç:</b>\n\n"
            f"1Ô∏è‚É£ {duty_pair[0]}\n"
            f"2Ô∏è‚É£ {duty_pair[1]}\n\n"
            f"üìÖ –î–∞—Ç–∞: {current_date.strftime('%d.%m.%Y')}\n"
            f"üïí –í—Ä–µ–º—è: {current_date.strftime('%H:%M')}"
        )
        
        if send_message_with_retry(group_id, message, parse_mode='HTML', message_thread_id=thread_id):
            logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {'–≤ —Ç–æ–ø–∏–∫ ' + str(thread_id) if thread_id else ''}")
            
            db.settings.update_one(
                {"_id": "bot_settings"},
                {"$set": {"last_message_date": current_date}}
            )
            
            db.duty_history.insert_one({
                "date": current_date,
                "duty1": duty_pair[0],
                "duty2": duty_pair[1]
            })
        else:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–ø—ã—Ç–æ–∫")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ send_duty_message: {e}")

def is_creator(user_id):
    return str(user_id) == str(CREATOR_ID)

@bot.message_handler(commands=['start'])
def send_welcome(message):
    try:
        if not is_creator(message.from_user.id):
            logger.info(f"‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É /start –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {message.from_user.id}")
            return
            
        chat_id = message.chat.id
        thread_id = message.message_thread_id if hasattr(message,'message_thread_id') else None
        
        if message.chat.type in ['group', 'supergroup']:
            set_group_and_thread_id(chat_id, thread_id)
            
            location_info = "–≤ —ç—Ç–æ—Ç —Ç–æ–ø–∏–∫" if thread_id else "–≤ —ç—Ç—É –≥—Ä—É–ø–ø—É"
            bot.reply_to(
                message,
                f"‚ú® –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–µ–∂—É—Ä–Ω—ã—Ö. "
                f"–Ø –±—É–¥—É –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è {location_info} –∫–∞–∂–¥—ã–π —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å –≤ {DUTY_MESSAGE_TIME} –ø–æ –ú–æ—Å–∫–æ–≤—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏.",
                message_thread_id=thread_id
            )
            logger.info(f"‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –≤ —á–∞—Ç–µ {chat_id}")
        else:
            bot.reply_to(message, "üëã –ü—Ä–∏–≤–µ—Ç! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ –º–µ–Ω—è –≤ –≥—Ä—É–ø–ø—É –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–∞–º –∫–æ–º–∞–Ω–¥—É /start")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ send_welcome: {e}")

@bot.message_handler(commands=['stop'])
def stop_bot(message):
    try:
        if not is_creator(message.from_user.id):
            logger.info(f"‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É /stop –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {message.from_user.id}")
            return
            
        global bot_active
        bot_active = False
        bot.reply_to(message, "üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ –¥–µ–∂—É—Ä–Ω—ã—Ö –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")
        logger.info("üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ stop_bot: {e}")

@bot.message_handler(commands=['resume'])
def resume_bot(message):
    try:
        if not is_creator(message.from_user.id):
            logger.info(f"‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É /resume –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {message.from_user.id}")
            return
            
        global bot_active
        bot_active = True
        bot.reply_to(message, "‚úÖ –ë–æ—Ç –≤–æ–∑–æ–±–Ω–æ–≤–∏–ª —Ä–∞–±–æ—Ç—É. –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ –¥–µ–∂—É—Ä–Ω—ã—Ö –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞.")
        logger.info("‚úÖ –ë–æ—Ç –≤–æ–∑–æ–±–Ω–æ–≤–∏–ª —Ä–∞–±–æ—Ç—É")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ resume_bot: {e}")

def set_group_and_thread_id(group_id, thread_id=None):
    try:
        update_data = {"group_id": group_id}
        if thread_id is not None:
            update_data["thread_id"] = thread_id
        
        db.settings.update_one(
            {"_id": "bot_settings"},
            {"$set": update_data},
            upsert=True
        )
        logger.info(f"‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã: ID –≥—Ä—É–ø–ø—ã: {group_id}, ID —Ç–æ–ø–∏–∫–∞: {thread_id}")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ set_group_and_thread_id: {e}")

def check_and_send_if_needed():
    try:
        moscow_tz = pytz.timezone(TIMEZONE)
        current_time = datetime.now(moscow_tz)
        target_time = datetime.strptime(DUTY_MESSAGE_TIME, "%H:%M").time()
        
        logger.info(f"üïí –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {current_time.strftime('%H:%M:%S')}, –¶–µ–ª–µ–≤–æ–µ –≤—Ä–µ–º—è: {target_time.strftime('%H:%M:%S')}")
        
        if current_time.time() >= target_time:
            logger.info("üîç –í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞—Å—Ç—É–ø–∏–ª–æ, –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è...")
            if should_send_message():
                logger.info("üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è...")
                send_duty_message()
            else:
                logger.info("‚ÑπÔ∏è –£—Å–ª–æ–≤–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã")
        else:
            logger.info("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ check_and_send_if_needed: {e}")

def schedule_checker():
    while True:
        try:
            check_and_send_if_needed()
            time.sleep(30)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ schedule_checker: {e}")

def main():
    try:
        initialize_db()
        
        moscow_tz = pytz.timezone(TIMEZONE)
        current_time = datetime.now(moscow_tz)
        logger.info(f"üïí –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ –ú–æ—Å–∫–≤–µ: {current_time.strftime('%H:%M:%S')}")
        
        if current_time.time() >= datetime.strptime(DUTY_MESSAGE_TIME, "%H:%M").time():
            logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ...")
            if should_send_message():
                send_duty_message()
        
        scheduler_thread = threading.Thread(target=schedule_checker)
        scheduler_thread.daemon = True
        scheduler_thread.start()
        logger.info("‚ö° –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω")
        
        logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
        
        global bot_instance
        bot_instance = bot
        bot.infinity_polling(timeout=10, long_polling_timeout=5)
        
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")

if __name__ == '__main__':
    main()
